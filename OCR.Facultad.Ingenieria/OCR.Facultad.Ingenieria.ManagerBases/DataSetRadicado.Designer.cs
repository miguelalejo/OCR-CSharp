//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.4971
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace OCR.Facultad.Ingenieria.ManagerBases {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetRadicado")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetRadicado : global::System.Data.DataSet {
        
        private radicadoDataTable tableradicado;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetRadicado() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetRadicado(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["radicado"] != null)) {
                    base.Tables.Add(new radicadoDataTable(ds.Tables["radicado"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public radicadoDataTable radicado {
            get {
                return this.tableradicado;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSetRadicado cln = ((DataSetRadicado)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["radicado"] != null)) {
                    base.Tables.Add(new radicadoDataTable(ds.Tables["radicado"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableradicado = ((radicadoDataTable)(base.Tables["radicado"]));
            if ((initTable == true)) {
                if ((this.tableradicado != null)) {
                    this.tableradicado.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetRadicado";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetRadicado.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableradicado = new radicadoDataTable();
            base.Tables.Add(this.tableradicado);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeradicado() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetRadicado ds = new DataSetRadicado();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void radicadoRowChangeEventHandler(object sender, radicadoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class radicadoDataTable : global::System.Data.TypedTableBase<radicadoRow> {
            
            private global::System.Data.DataColumn columnradi_nume_radi;
            
            private global::System.Data.DataColumn columnradi_asunto;
            
            private global::System.Data.DataColumn columnradi_usa_radi;
            
            private global::System.Data.DataColumn columnradi_fecha_radi;
            
            private global::System.Data.DataColumn columnradi_desc_anex;
            
            private global::System.Data.DataColumn columnradi_path;
            
            private global::System.Data.DataColumn columnradi_tipo;
            
            private global::System.Data.DataColumn columnradi_tipo_descripcion;
            
            private global::System.Data.DataColumn columnradi_nropaginas;
            
            private global::System.Data.DataColumn columnradi_nombre;
            
            private global::System.Data.DataColumn columnradi_tamano_bytes;
            
            private global::System.Data.DataColumn columnradi_tipo_doc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public radicadoDataTable() {
                this.TableName = "radicado";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal radicadoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected radicadoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_nume_radiColumn {
                get {
                    return this.columnradi_nume_radi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_asuntoColumn {
                get {
                    return this.columnradi_asunto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_usa_radiColumn {
                get {
                    return this.columnradi_usa_radi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_fecha_radiColumn {
                get {
                    return this.columnradi_fecha_radi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_desc_anexColumn {
                get {
                    return this.columnradi_desc_anex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_pathColumn {
                get {
                    return this.columnradi_path;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_tipoColumn {
                get {
                    return this.columnradi_tipo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_tipo_descripcionColumn {
                get {
                    return this.columnradi_tipo_descripcion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_nropaginasColumn {
                get {
                    return this.columnradi_nropaginas;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_nombreColumn {
                get {
                    return this.columnradi_nombre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_tamano_bytesColumn {
                get {
                    return this.columnradi_tamano_bytes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn radi_tipo_docColumn {
                get {
                    return this.columnradi_tipo_doc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public radicadoRow this[int index] {
                get {
                    return ((radicadoRow)(this.Rows[index]));
                }
            }
            
            public event radicadoRowChangeEventHandler radicadoRowChanging;
            
            public event radicadoRowChangeEventHandler radicadoRowChanged;
            
            public event radicadoRowChangeEventHandler radicadoRowDeleting;
            
            public event radicadoRowChangeEventHandler radicadoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddradicadoRow(radicadoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public radicadoRow AddradicadoRow(int radi_nume_radi, string radi_asunto, string radi_usa_radi, System.DateTime radi_fecha_radi, string radi_desc_anex, string radi_path, string radi_tipo, string radi_tipo_descripcion, int radi_nropaginas, string radi_nombre, long radi_tamano_bytes, int radi_tipo_doc) {
                radicadoRow rowradicadoRow = ((radicadoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        radi_nume_radi,
                        radi_asunto,
                        radi_usa_radi,
                        radi_fecha_radi,
                        radi_desc_anex,
                        radi_path,
                        radi_tipo,
                        radi_tipo_descripcion,
                        radi_nropaginas,
                        radi_nombre,
                        radi_tamano_bytes,
                        radi_tipo_doc};
                rowradicadoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowradicadoRow);
                return rowradicadoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public radicadoRow FindByradi_nume_radi(int radi_nume_radi) {
                return ((radicadoRow)(this.Rows.Find(new object[] {
                            radi_nume_radi})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                radicadoDataTable cln = ((radicadoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new radicadoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnradi_nume_radi = base.Columns["radi_nume_radi"];
                this.columnradi_asunto = base.Columns["radi_asunto"];
                this.columnradi_usa_radi = base.Columns["radi_usa_radi"];
                this.columnradi_fecha_radi = base.Columns["radi_fecha_radi"];
                this.columnradi_desc_anex = base.Columns["radi_desc_anex"];
                this.columnradi_path = base.Columns["radi_path"];
                this.columnradi_tipo = base.Columns["radi_tipo"];
                this.columnradi_tipo_descripcion = base.Columns["radi_tipo_descripcion"];
                this.columnradi_nropaginas = base.Columns["radi_nropaginas"];
                this.columnradi_nombre = base.Columns["radi_nombre"];
                this.columnradi_tamano_bytes = base.Columns["radi_tamano_bytes"];
                this.columnradi_tipo_doc = base.Columns["radi_tipo_doc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnradi_nume_radi = new global::System.Data.DataColumn("radi_nume_radi", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_nume_radi);
                this.columnradi_asunto = new global::System.Data.DataColumn("radi_asunto", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_asunto);
                this.columnradi_usa_radi = new global::System.Data.DataColumn("radi_usa_radi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_usa_radi);
                this.columnradi_fecha_radi = new global::System.Data.DataColumn("radi_fecha_radi", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_fecha_radi);
                this.columnradi_desc_anex = new global::System.Data.DataColumn("radi_desc_anex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_desc_anex);
                this.columnradi_path = new global::System.Data.DataColumn("radi_path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_path);
                this.columnradi_tipo = new global::System.Data.DataColumn("radi_tipo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_tipo);
                this.columnradi_tipo_descripcion = new global::System.Data.DataColumn("radi_tipo_descripcion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_tipo_descripcion);
                this.columnradi_nropaginas = new global::System.Data.DataColumn("radi_nropaginas", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_nropaginas);
                this.columnradi_nombre = new global::System.Data.DataColumn("radi_nombre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_nombre);
                this.columnradi_tamano_bytes = new global::System.Data.DataColumn("radi_tamano_bytes", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_tamano_bytes);
                this.columnradi_tipo_doc = new global::System.Data.DataColumn("radi_tipo_doc", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnradi_tipo_doc);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnradi_nume_radi}, true));
                this.columnradi_nume_radi.AllowDBNull = false;
                this.columnradi_nume_radi.Unique = true;
                this.columnradi_asunto.MaxLength = 30;
                this.columnradi_usa_radi.MaxLength = 30;
                this.columnradi_desc_anex.MaxLength = 30;
                this.columnradi_path.MaxLength = 30;
                this.columnradi_tipo.MaxLength = 30;
                this.columnradi_tipo_descripcion.MaxLength = 30;
                this.columnradi_nombre.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public radicadoRow NewradicadoRow() {
                return ((radicadoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new radicadoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(radicadoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.radicadoRowChanged != null)) {
                    this.radicadoRowChanged(this, new radicadoRowChangeEvent(((radicadoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.radicadoRowChanging != null)) {
                    this.radicadoRowChanging(this, new radicadoRowChangeEvent(((radicadoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.radicadoRowDeleted != null)) {
                    this.radicadoRowDeleted(this, new radicadoRowChangeEvent(((radicadoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.radicadoRowDeleting != null)) {
                    this.radicadoRowDeleting(this, new radicadoRowChangeEvent(((radicadoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveradicadoRow(radicadoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetRadicado ds = new DataSetRadicado();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "radicadoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class radicadoRow : global::System.Data.DataRow {
            
            private radicadoDataTable tableradicado;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal radicadoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableradicado = ((radicadoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int radi_nume_radi {
                get {
                    return ((int)(this[this.tableradicado.radi_nume_radiColumn]));
                }
                set {
                    this[this.tableradicado.radi_nume_radiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string radi_asunto {
                get {
                    try {
                        return ((string)(this[this.tableradicado.radi_asuntoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_asunto\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_asuntoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string radi_usa_radi {
                get {
                    try {
                        return ((string)(this[this.tableradicado.radi_usa_radiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_usa_radi\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_usa_radiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime radi_fecha_radi {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableradicado.radi_fecha_radiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_fecha_radi\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_fecha_radiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string radi_desc_anex {
                get {
                    try {
                        return ((string)(this[this.tableradicado.radi_desc_anexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_desc_anex\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_desc_anexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string radi_path {
                get {
                    try {
                        return ((string)(this[this.tableradicado.radi_pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_path\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string radi_tipo {
                get {
                    try {
                        return ((string)(this[this.tableradicado.radi_tipoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_tipo\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_tipoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string radi_tipo_descripcion {
                get {
                    try {
                        return ((string)(this[this.tableradicado.radi_tipo_descripcionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_tipo_descripcion\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_tipo_descripcionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int radi_nropaginas {
                get {
                    try {
                        return ((int)(this[this.tableradicado.radi_nropaginasColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_nropaginas\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_nropaginasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string radi_nombre {
                get {
                    try {
                        return ((string)(this[this.tableradicado.radi_nombreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_nombre\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_nombreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long radi_tamano_bytes {
                get {
                    try {
                        return ((long)(this[this.tableradicado.radi_tamano_bytesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_tamano_bytes\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_tamano_bytesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int radi_tipo_doc {
                get {
                    try {
                        return ((int)(this[this.tableradicado.radi_tipo_docColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'radi_tipo_doc\' de la tabla \'radicado\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableradicado.radi_tipo_docColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_asuntoNull() {
                return this.IsNull(this.tableradicado.radi_asuntoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_asuntoNull() {
                this[this.tableradicado.radi_asuntoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_usa_radiNull() {
                return this.IsNull(this.tableradicado.radi_usa_radiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_usa_radiNull() {
                this[this.tableradicado.radi_usa_radiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_fecha_radiNull() {
                return this.IsNull(this.tableradicado.radi_fecha_radiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_fecha_radiNull() {
                this[this.tableradicado.radi_fecha_radiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_desc_anexNull() {
                return this.IsNull(this.tableradicado.radi_desc_anexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_desc_anexNull() {
                this[this.tableradicado.radi_desc_anexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_pathNull() {
                return this.IsNull(this.tableradicado.radi_pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_pathNull() {
                this[this.tableradicado.radi_pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_tipoNull() {
                return this.IsNull(this.tableradicado.radi_tipoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_tipoNull() {
                this[this.tableradicado.radi_tipoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_tipo_descripcionNull() {
                return this.IsNull(this.tableradicado.radi_tipo_descripcionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_tipo_descripcionNull() {
                this[this.tableradicado.radi_tipo_descripcionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_nropaginasNull() {
                return this.IsNull(this.tableradicado.radi_nropaginasColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_nropaginasNull() {
                this[this.tableradicado.radi_nropaginasColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_nombreNull() {
                return this.IsNull(this.tableradicado.radi_nombreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_nombreNull() {
                this[this.tableradicado.radi_nombreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_tamano_bytesNull() {
                return this.IsNull(this.tableradicado.radi_tamano_bytesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_tamano_bytesNull() {
                this[this.tableradicado.radi_tamano_bytesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isradi_tipo_docNull() {
                return this.IsNull(this.tableradicado.radi_tipo_docColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setradi_tipo_docNull() {
                this[this.tableradicado.radi_tipo_docColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class radicadoRowChangeEvent : global::System.EventArgs {
            
            private radicadoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public radicadoRowChangeEvent(radicadoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public radicadoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace OCR.Facultad.Ingenieria.ManagerBases.DataSetRadicadoTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class radicadoTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public radicadoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "radicado";
            tableMapping.ColumnMappings.Add("radi_nume_radi", "radi_nume_radi");
            tableMapping.ColumnMappings.Add("radi_asunto", "radi_asunto");
            tableMapping.ColumnMappings.Add("radi_usa_radi", "radi_usa_radi");
            tableMapping.ColumnMappings.Add("radi_fecha_radi", "radi_fecha_radi");
            tableMapping.ColumnMappings.Add("radi_desc_anex", "radi_desc_anex");
            tableMapping.ColumnMappings.Add("radi_path", "radi_path");
            tableMapping.ColumnMappings.Add("radi_tipo", "radi_tipo");
            tableMapping.ColumnMappings.Add("radi_tipo_descripcion", "radi_tipo_descripcion");
            tableMapping.ColumnMappings.Add("radi_nropaginas", "radi_nropaginas");
            tableMapping.ColumnMappings.Add("radi_nombre", "radi_nombre");
            tableMapping.ColumnMappings.Add("radi_tamano_bytes", "radi_tamano_bytes");
            tableMapping.ColumnMappings.Add("radi_tipo_doc", "radi_tipo_doc");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `radicado` WHERE ((`radi_nume_radi` = @Original_radi_nume_radi) AND ((@IsNull_radi_asunto = 1 AND `radi_asunto` IS NULL) OR (`radi_asunto` = @Original_radi_asunto)) AND ((@IsNull_radi_usa_radi = 1 AND `radi_usa_radi` IS NULL) OR (`radi_usa_radi` = @Original_radi_usa_radi)) AND ((@IsNull_radi_fecha_radi = 1 AND `radi_fecha_radi` IS NULL) OR (`radi_fecha_radi` = @Original_radi_fecha_radi)) AND ((@IsNull_radi_desc_anex = 1 AND `radi_desc_anex` IS NULL) OR (`radi_desc_anex` = @Original_radi_desc_anex)) AND ((@IsNull_radi_path = 1 AND `radi_path` IS NULL) OR (`radi_path` = @Original_radi_path)) AND ((@IsNull_radi_tipo = 1 AND `radi_tipo` IS NULL) OR (`radi_tipo` = @Original_radi_tipo)) AND ((@IsNull_radi_tipo_descripcion = 1 AND `radi_tipo_descripcion` IS NULL) OR (`radi_tipo_descripcion` = @Original_radi_tipo_descripcion)) AND ((@IsNull_radi_nropaginas = 1 AND `radi_nropaginas` IS NULL) OR (`radi_nropaginas` = @Original_radi_nropaginas)) AND ((@IsNull_radi_nombre = 1 AND `radi_nombre` IS NULL) OR (`radi_nombre` = @Original_radi_nombre)) AND ((@IsNull_radi_tamano_bytes = 1 AND `radi_tamano_bytes` IS NULL) OR (`radi_tamano_bytes` = @Original_radi_tamano_bytes)) AND ((@IsNull_radi_tipo_doc = 1 AND `radi_tipo_doc` IS NULL) OR (`radi_tipo_doc` = @Original_radi_tipo_doc)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nume_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_asunto";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_asunto";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_asunto";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_asunto";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_usa_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_usa_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_usa_radi";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_usa_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_fecha_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_fecha_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_fecha_radi";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "radi_fecha_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_desc_anex";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_desc_anex";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_desc_anex";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_desc_anex";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_path";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_path";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_tipo";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_tipo";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_tipo_descripcion";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_descripcion";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_tipo_descripcion";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_descripcion";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_nropaginas";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nropaginas";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_nropaginas";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nropaginas";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_nombre";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nombre";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_nombre";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_nombre";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_tamano_bytes";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tamano_bytes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_tamano_bytes";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "radi_tamano_bytes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_tipo_doc";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_doc";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_tipo_doc";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_doc";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `radicado` (`radi_nume_radi`, `radi_asunto`, `radi_usa_radi`, `radi_fecha_radi`, `radi_desc_anex`, `radi_path`, `radi_tipo`, `radi_tipo_descripcion`, `radi_nropaginas`, `radi_nombre`, `radi_tamano_bytes`, `radi_tipo_doc`) VALUES (@radi_nume_radi, @radi_asunto, @radi_usa_radi, @radi_fecha_radi, @radi_desc_anex, @radi_path, @radi_tipo, @radi_tipo_descripcion, @radi_nropaginas, @radi_nombre, @radi_tamano_bytes, @radi_tipo_doc)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nume_radi";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_asunto";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_asunto";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_usa_radi";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_usa_radi";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_fecha_radi";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "radi_fecha_radi";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_desc_anex";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_desc_anex";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_path";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_path";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tipo";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tipo_descripcion";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_descripcion";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_nropaginas";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nropaginas";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_nombre";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_nombre";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tamano_bytes";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "radi_tamano_bytes";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tipo_doc";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_doc";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `radicado` SET `radi_nume_radi` = @radi_nume_radi, `radi_asunto` = @radi_a" +
                "sunto, `radi_usa_radi` = @radi_usa_radi, `radi_fecha_radi` = @radi_fecha_radi, `" +
                "radi_desc_anex` = @radi_desc_anex, `radi_path` = @radi_path, `radi_tipo` = @radi" +
                "_tipo, `radi_tipo_descripcion` = @radi_tipo_descripcion, `radi_nropaginas` = @ra" +
                "di_nropaginas, `radi_nombre` = @radi_nombre, `radi_tamano_bytes` = @radi_tamano_" +
                "bytes, `radi_tipo_doc` = @radi_tipo_doc WHERE ((`radi_nume_radi` = @Original_rad" +
                "i_nume_radi) AND ((@IsNull_radi_asunto = 1 AND `radi_asunto` IS NULL) OR (`radi_" +
                "asunto` = @Original_radi_asunto)) AND ((@IsNull_radi_usa_radi = 1 AND `radi_usa_" +
                "radi` IS NULL) OR (`radi_usa_radi` = @Original_radi_usa_radi)) AND ((@IsNull_rad" +
                "i_fecha_radi = 1 AND `radi_fecha_radi` IS NULL) OR (`radi_fecha_radi` = @Origina" +
                "l_radi_fecha_radi)) AND ((@IsNull_radi_desc_anex = 1 AND `radi_desc_anex` IS NUL" +
                "L) OR (`radi_desc_anex` = @Original_radi_desc_anex)) AND ((@IsNull_radi_path = 1" +
                " AND `radi_path` IS NULL) OR (`radi_path` = @Original_radi_path)) AND ((@IsNull_" +
                "radi_tipo = 1 AND `radi_tipo` IS NULL) OR (`radi_tipo` = @Original_radi_tipo)) A" +
                "ND ((@IsNull_radi_tipo_descripcion = 1 AND `radi_tipo_descripcion` IS NULL) OR (" +
                "`radi_tipo_descripcion` = @Original_radi_tipo_descripcion)) AND ((@IsNull_radi_n" +
                "ropaginas = 1 AND `radi_nropaginas` IS NULL) OR (`radi_nropaginas` = @Original_r" +
                "adi_nropaginas)) AND ((@IsNull_radi_nombre = 1 AND `radi_nombre` IS NULL) OR (`r" +
                "adi_nombre` = @Original_radi_nombre)) AND ((@IsNull_radi_tamano_bytes = 1 AND `r" +
                "adi_tamano_bytes` IS NULL) OR (`radi_tamano_bytes` = @Original_radi_tamano_bytes" +
                ")) AND ((@IsNull_radi_tipo_doc = 1 AND `radi_tipo_doc` IS NULL) OR (`radi_tipo_d" +
                "oc` = @Original_radi_tipo_doc)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nume_radi";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_asunto";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_asunto";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_usa_radi";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_usa_radi";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_fecha_radi";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "radi_fecha_radi";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_desc_anex";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_desc_anex";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_path";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_path";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tipo";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tipo_descripcion";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_descripcion";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_nropaginas";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nropaginas";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_nombre";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_nombre";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tamano_bytes";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "radi_tamano_bytes";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tipo_doc";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_doc";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nume_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_asunto";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_asunto";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_asunto";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_asunto";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_usa_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_usa_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_usa_radi";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_usa_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_fecha_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_fecha_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_fecha_radi";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "radi_fecha_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_desc_anex";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_desc_anex";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_desc_anex";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_desc_anex";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_path";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_path";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_path";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_tipo";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_tipo";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_tipo_descripcion";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_descripcion";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_tipo_descripcion";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_descripcion";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_nropaginas";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nropaginas";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_nropaginas";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nropaginas";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_nombre";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nombre";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_nombre";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "radi_nombre";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_tamano_bytes";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tamano_bytes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_tamano_bytes";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "radi_tamano_bytes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_radi_tipo_doc";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_doc";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_tipo_doc";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_doc";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::OCR.Facultad.Ingenieria.ManagerBases.Properties.Settings.Default.ocrConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[5];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT `radi_nume_radi`, `radi_asunto`, `radi_usa_radi`, `radi_fecha_radi`, `radi" +
                "_desc_anex`, `radi_path`, `radi_tipo`, `radi_tipo_descripcion`, `radi_nropaginas" +
                "`, `radi_nombre`, `radi_tamano_bytes`, `radi_tipo_doc` FROM `radicado`";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     IFNULL(MAX(radi_nume_radi), 0) AS Maximo\r\nFROM         radicado";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "DELETE FROM radicado\r\nWHERE        (radi_nombre = @Original_radi_nombre) ";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_nombre";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "radi_nombre";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._commandCollection[2].Parameters.Add(param);
            this._commandCollection[3] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"INSERT INTO `radicado` ( `radi_asunto`, `radi_usa_radi`, `radi_fecha_radi`, `radi_desc_anex`, `radi_path`, `radi_tipo`, `radi_tipo_descripcion`, `radi_nropaginas`, `radi_nombre`, `radi_tamano_bytes`, `radi_tipo_doc`) VALUES ( @radi_asunto, @radi_usa_radi, @radi_fecha_radi, @radi_desc_anex, @radi_path, @radi_tipo, @radi_tipo_descripcion, @radi_nropaginas, @radi_nombre, @radi_tamano_bytes, @radi_tipo_doc)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_asunto";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 30;
            param.IsNullable = true;
            param.SourceColumn = "radi_asunto";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_usa_radi";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 30;
            param.IsNullable = true;
            param.SourceColumn = "radi_usa_radi";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_fecha_radi";
            param.DbType = global::System.Data.DbType.DateTime;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "radi_fecha_radi";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_desc_anex";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 30;
            param.IsNullable = true;
            param.SourceColumn = "radi_desc_anex";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_path";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 500;
            param.IsNullable = true;
            param.SourceColumn = "radi_path";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tipo";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 30;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tipo_descripcion";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 30;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_descripcion";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_nropaginas";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_nropaginas";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_nombre";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "radi_nombre";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tamano_bytes";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "radi_tamano_bytes";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@radi_tipo_doc";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "radi_tipo_doc";
            this._commandCollection[3].Parameters.Add(param);
            this._commandCollection[4] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT        DISTINCT(radi_nume_radi)\r\nFROM            radicado\r\nWHERE radi_path" +
                "=@Original_radi_path and radi_nombre=@Original_radi_nombre";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_path";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 500;
            param.IsNullable = true;
            param.SourceColumn = "radi_path";
            this._commandCollection[4].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_radi_nombre";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "radi_nombre";
            this._commandCollection[4].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetRadicado.radicadoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetRadicado.radicadoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetRadicado.radicadoDataTable dataTable = new DataSetRadicado.radicadoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetRadicado.radicadoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetRadicado dataSet) {
            return this.Adapter.Update(dataSet, "radicado");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_radi_nume_radi, string Original_radi_asunto, string Original_radi_usa_radi, global::System.Nullable<global::System.DateTime> Original_radi_fecha_radi, string Original_radi_desc_anex, string Original_radi_path, string Original_radi_tipo, string Original_radi_tipo_descripcion, global::System.Nullable<int> Original_radi_nropaginas, string Original_radi_nombre, global::System.Nullable<long> Original_radi_tamano_bytes, global::System.Nullable<int> Original_radi_tipo_doc) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_radi_nume_radi));
            if ((Original_radi_asunto == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_radi_asunto));
            }
            if ((Original_radi_usa_radi == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_radi_usa_radi));
            }
            if ((Original_radi_fecha_radi.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_radi_fecha_radi.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_radi_desc_anex == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_radi_desc_anex));
            }
            if ((Original_radi_path == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_radi_path));
            }
            if ((Original_radi_tipo == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_radi_tipo));
            }
            if ((Original_radi_tipo_descripcion == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_radi_tipo_descripcion));
            }
            if ((Original_radi_nropaginas.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_radi_nropaginas.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_radi_nombre == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_radi_nombre));
            }
            if ((Original_radi_tamano_bytes.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((long)(Original_radi_tamano_bytes.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_radi_tipo_doc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_radi_tipo_doc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int radi_nume_radi, string radi_asunto, string radi_usa_radi, global::System.Nullable<global::System.DateTime> radi_fecha_radi, string radi_desc_anex, string radi_path, string radi_tipo, string radi_tipo_descripcion, global::System.Nullable<int> radi_nropaginas, string radi_nombre, global::System.Nullable<long> radi_tamano_bytes, global::System.Nullable<int> radi_tipo_doc) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(radi_nume_radi));
            if ((radi_asunto == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(radi_asunto));
            }
            if ((radi_usa_radi == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(radi_usa_radi));
            }
            if ((radi_fecha_radi.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(radi_fecha_radi.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((radi_desc_anex == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(radi_desc_anex));
            }
            if ((radi_path == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(radi_path));
            }
            if ((radi_tipo == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(radi_tipo));
            }
            if ((radi_tipo_descripcion == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(radi_tipo_descripcion));
            }
            if ((radi_nropaginas.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(radi_nropaginas.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((radi_nombre == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(radi_nombre));
            }
            if ((radi_tamano_bytes.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((long)(radi_tamano_bytes.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((radi_tipo_doc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(radi_tipo_doc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int radi_nume_radi, 
                    string radi_asunto, 
                    string radi_usa_radi, 
                    global::System.Nullable<global::System.DateTime> radi_fecha_radi, 
                    string radi_desc_anex, 
                    string radi_path, 
                    string radi_tipo, 
                    string radi_tipo_descripcion, 
                    global::System.Nullable<int> radi_nropaginas, 
                    string radi_nombre, 
                    global::System.Nullable<long> radi_tamano_bytes, 
                    global::System.Nullable<int> radi_tipo_doc, 
                    int Original_radi_nume_radi, 
                    string Original_radi_asunto, 
                    string Original_radi_usa_radi, 
                    global::System.Nullable<global::System.DateTime> Original_radi_fecha_radi, 
                    string Original_radi_desc_anex, 
                    string Original_radi_path, 
                    string Original_radi_tipo, 
                    string Original_radi_tipo_descripcion, 
                    global::System.Nullable<int> Original_radi_nropaginas, 
                    string Original_radi_nombre, 
                    global::System.Nullable<long> Original_radi_tamano_bytes, 
                    global::System.Nullable<int> Original_radi_tipo_doc) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(radi_nume_radi));
            if ((radi_asunto == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(radi_asunto));
            }
            if ((radi_usa_radi == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(radi_usa_radi));
            }
            if ((radi_fecha_radi.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(radi_fecha_radi.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((radi_desc_anex == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(radi_desc_anex));
            }
            if ((radi_path == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(radi_path));
            }
            if ((radi_tipo == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(radi_tipo));
            }
            if ((radi_tipo_descripcion == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(radi_tipo_descripcion));
            }
            if ((radi_nropaginas.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(radi_nropaginas.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((radi_nombre == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(radi_nombre));
            }
            if ((radi_tamano_bytes.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(radi_tamano_bytes.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((radi_tipo_doc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(radi_tipo_doc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_radi_nume_radi));
            if ((Original_radi_asunto == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_radi_asunto));
            }
            if ((Original_radi_usa_radi == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_radi_usa_radi));
            }
            if ((Original_radi_fecha_radi.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_radi_fecha_radi.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_radi_desc_anex == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_radi_desc_anex));
            }
            if ((Original_radi_path == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_radi_path));
            }
            if ((Original_radi_tipo == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_radi_tipo));
            }
            if ((Original_radi_tipo_descripcion == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_radi_tipo_descripcion));
            }
            if ((Original_radi_nropaginas.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_radi_nropaginas.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_radi_nombre == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_radi_nombre));
            }
            if ((Original_radi_tamano_bytes.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((long)(Original_radi_tamano_bytes.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_radi_tipo_doc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_radi_tipo_doc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string radi_asunto, 
                    string radi_usa_radi, 
                    global::System.Nullable<global::System.DateTime> radi_fecha_radi, 
                    string radi_desc_anex, 
                    string radi_path, 
                    string radi_tipo, 
                    string radi_tipo_descripcion, 
                    global::System.Nullable<int> radi_nropaginas, 
                    string radi_nombre, 
                    global::System.Nullable<long> radi_tamano_bytes, 
                    global::System.Nullable<int> radi_tipo_doc, 
                    int Original_radi_nume_radi, 
                    string Original_radi_asunto, 
                    string Original_radi_usa_radi, 
                    global::System.Nullable<global::System.DateTime> Original_radi_fecha_radi, 
                    string Original_radi_desc_anex, 
                    string Original_radi_path, 
                    string Original_radi_tipo, 
                    string Original_radi_tipo_descripcion, 
                    global::System.Nullable<int> Original_radi_nropaginas, 
                    string Original_radi_nombre, 
                    global::System.Nullable<long> Original_radi_tamano_bytes, 
                    global::System.Nullable<int> Original_radi_tipo_doc) {
            return this.Update(Original_radi_nume_radi, radi_asunto, radi_usa_radi, radi_fecha_radi, radi_desc_anex, radi_path, radi_tipo, radi_tipo_descripcion, radi_nropaginas, radi_nombre, radi_tamano_bytes, radi_tipo_doc, Original_radi_nume_radi, Original_radi_asunto, Original_radi_usa_radi, Original_radi_fecha_radi, Original_radi_desc_anex, Original_radi_path, Original_radi_tipo, Original_radi_tipo_descripcion, Original_radi_nropaginas, Original_radi_nombre, Original_radi_tamano_bytes, Original_radi_tipo_doc);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<long> BuscarMaximoNume_Radi() {
            global::MySql.Data.MySqlClient.MySqlCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<long>();
            }
            else {
                return new global::System.Nullable<long>(((long)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteRadicado(string Original_radi_nombre) {
            global::MySql.Data.MySqlClient.MySqlCommand command = this.CommandCollection[2];
            if ((Original_radi_nombre == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(Original_radi_nombre));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertRadicado(string radi_asunto, string radi_usa_radi, global::System.Nullable<global::System.DateTime> radi_fecha_radi, string radi_desc_anex, string radi_path, string radi_tipo, string radi_tipo_descripcion, global::System.Nullable<int> radi_nropaginas, string radi_nombre, global::System.Nullable<long> radi_tamano_bytes, global::System.Nullable<int> radi_tipo_doc) {
            global::MySql.Data.MySqlClient.MySqlCommand command = this.CommandCollection[3];
            if ((radi_asunto == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(radi_asunto));
            }
            if ((radi_usa_radi == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(radi_usa_radi));
            }
            if ((radi_fecha_radi.HasValue == true)) {
                command.Parameters[2].Value = ((System.DateTime)(radi_fecha_radi.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((radi_desc_anex == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(radi_desc_anex));
            }
            if ((radi_path == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(radi_path));
            }
            if ((radi_tipo == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(radi_tipo));
            }
            if ((radi_tipo_descripcion == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(radi_tipo_descripcion));
            }
            if ((radi_nropaginas.HasValue == true)) {
                command.Parameters[7].Value = ((int)(radi_nropaginas.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((radi_nombre == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(radi_nombre));
            }
            if ((radi_tamano_bytes.HasValue == true)) {
                command.Parameters[9].Value = ((long)(radi_tamano_bytes.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((radi_tipo_doc.HasValue == true)) {
                command.Parameters[10].Value = ((int)(radi_tipo_doc.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object QueryBuscarRadicado(string Original_radi_path, string Original_radi_nombre) {
            global::MySql.Data.MySqlClient.MySqlCommand command = this.CommandCollection[4];
            if ((Original_radi_path == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(Original_radi_path));
            }
            if ((Original_radi_nombre == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(Original_radi_nombre));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private radicadoTableAdapter _radicadoTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public radicadoTableAdapter radicadoTableAdapter {
            get {
                return this._radicadoTableAdapter;
            }
            set {
                this._radicadoTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._radicadoTableAdapter != null) 
                            && (this._radicadoTableAdapter.Connection != null))) {
                    return this._radicadoTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._radicadoTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(DataSetRadicado dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._radicadoTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.radicado.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._radicadoTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(DataSetRadicado dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._radicadoTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.radicado.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._radicadoTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(DataSetRadicado dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._radicadoTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.radicado.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._radicadoTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(DataSetRadicado dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._radicadoTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._radicadoTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" +
                        "sma cadena de conexión.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda" +
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co" +
                        "n las transacciones o el estado actual no permite que comience la transacción.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._radicadoTableAdapter != null)) {
                    revertConnections.Add(this._radicadoTableAdapter, this._radicadoTableAdapter.Connection);
                    this._radicadoTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(workConnection));
                    this._radicadoTableAdapter.Transaction = ((global::MySql.Data.MySqlClient.MySqlTransaction)(workTransaction));
                    if (this._radicadoTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._radicadoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._radicadoTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._radicadoTableAdapter != null)) {
                    this._radicadoTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(revertConnections[this._radicadoTableAdapter]));
                    this._radicadoTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591