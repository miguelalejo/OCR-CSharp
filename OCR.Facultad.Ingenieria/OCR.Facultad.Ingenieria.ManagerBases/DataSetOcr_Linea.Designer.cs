//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.4971
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace OCR.Facultad.Ingenieria.ManagerBases {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetOcr_Linea")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetOcr_Linea : global::System.Data.DataSet {
        
        private ocr_lineaDataTable tableocr_linea;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetOcr_Linea() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetOcr_Linea(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ocr_linea"] != null)) {
                    base.Tables.Add(new ocr_lineaDataTable(ds.Tables["ocr_linea"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ocr_lineaDataTable ocr_linea {
            get {
                return this.tableocr_linea;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSetOcr_Linea cln = ((DataSetOcr_Linea)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ocr_linea"] != null)) {
                    base.Tables.Add(new ocr_lineaDataTable(ds.Tables["ocr_linea"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableocr_linea = ((ocr_lineaDataTable)(base.Tables["ocr_linea"]));
            if ((initTable == true)) {
                if ((this.tableocr_linea != null)) {
                    this.tableocr_linea.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetOcr_Linea";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetOcr_Linea.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableocr_linea = new ocr_lineaDataTable();
            base.Tables.Add(this.tableocr_linea);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeocr_linea() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetOcr_Linea ds = new DataSetOcr_Linea();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ocr_lineaRowChangeEventHandler(object sender, ocr_lineaRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ocr_lineaDataTable : global::System.Data.TypedTableBase<ocr_lineaRow> {
            
            private global::System.Data.DataColumn columnocr_lin_id;
            
            private global::System.Data.DataColumn columnocr_lin_nume_radi;
            
            private global::System.Data.DataColumn columnocr_lin_batch_ocr;
            
            private global::System.Data.DataColumn columnocr_lin_pag_secpagina;
            
            private global::System.Data.DataColumn columnocr_lin_texto;
            
            private global::System.Data.DataColumn columnocr_lin_confidence;
            
            private global::System.Data.DataColumn columnocr_lin_blanks;
            
            private global::System.Data.DataColumn columnocr_lin_lineaocr;
            
            private global::System.Data.DataColumn columnocr_lin_linea;
            
            private global::System.Data.DataColumn columnocr_lin_fuente;
            
            private global::System.Data.DataColumn columnocr_lin_pointsize;
            
            private global::System.Data.DataColumn columnocr_lin_tipodato;
            
            private global::System.Data.DataColumn columnocr_lin_secpalabra;
            
            private global::System.Data.DataColumn columnocr_lin_x;
            
            private global::System.Data.DataColumn columnocr_lin_y;
            
            private global::System.Data.DataColumn columnocr_lin_ancho;
            
            private global::System.Data.DataColumn columnocr_lin_largo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocr_lineaDataTable() {
                this.TableName = "ocr_linea";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ocr_lineaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ocr_lineaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_idColumn {
                get {
                    return this.columnocr_lin_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_nume_radiColumn {
                get {
                    return this.columnocr_lin_nume_radi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_batch_ocrColumn {
                get {
                    return this.columnocr_lin_batch_ocr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_pag_secpaginaColumn {
                get {
                    return this.columnocr_lin_pag_secpagina;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_textoColumn {
                get {
                    return this.columnocr_lin_texto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_confidenceColumn {
                get {
                    return this.columnocr_lin_confidence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_blanksColumn {
                get {
                    return this.columnocr_lin_blanks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_lineaocrColumn {
                get {
                    return this.columnocr_lin_lineaocr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_lineaColumn {
                get {
                    return this.columnocr_lin_linea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_fuenteColumn {
                get {
                    return this.columnocr_lin_fuente;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_pointsizeColumn {
                get {
                    return this.columnocr_lin_pointsize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_tipodatoColumn {
                get {
                    return this.columnocr_lin_tipodato;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_secpalabraColumn {
                get {
                    return this.columnocr_lin_secpalabra;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_xColumn {
                get {
                    return this.columnocr_lin_x;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_yColumn {
                get {
                    return this.columnocr_lin_y;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_anchoColumn {
                get {
                    return this.columnocr_lin_ancho;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ocr_lin_largoColumn {
                get {
                    return this.columnocr_lin_largo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocr_lineaRow this[int index] {
                get {
                    return ((ocr_lineaRow)(this.Rows[index]));
                }
            }
            
            public event ocr_lineaRowChangeEventHandler ocr_lineaRowChanging;
            
            public event ocr_lineaRowChangeEventHandler ocr_lineaRowChanged;
            
            public event ocr_lineaRowChangeEventHandler ocr_lineaRowDeleting;
            
            public event ocr_lineaRowChangeEventHandler ocr_lineaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addocr_lineaRow(ocr_lineaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocr_lineaRow Addocr_lineaRow(
                        int ocr_lin_nume_radi, 
                        int ocr_lin_batch_ocr, 
                        int ocr_lin_pag_secpagina, 
                        string ocr_lin_texto, 
                        double ocr_lin_confidence, 
                        int ocr_lin_blanks, 
                        int ocr_lin_lineaocr, 
                        int ocr_lin_linea, 
                        int ocr_lin_fuente, 
                        int ocr_lin_pointsize, 
                        string ocr_lin_tipodato, 
                        int ocr_lin_secpalabra, 
                        float ocr_lin_x, 
                        float ocr_lin_y, 
                        float ocr_lin_ancho, 
                        float ocr_lin_largo) {
                ocr_lineaRow rowocr_lineaRow = ((ocr_lineaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ocr_lin_nume_radi,
                        ocr_lin_batch_ocr,
                        ocr_lin_pag_secpagina,
                        ocr_lin_texto,
                        ocr_lin_confidence,
                        ocr_lin_blanks,
                        ocr_lin_lineaocr,
                        ocr_lin_linea,
                        ocr_lin_fuente,
                        ocr_lin_pointsize,
                        ocr_lin_tipodato,
                        ocr_lin_secpalabra,
                        ocr_lin_x,
                        ocr_lin_y,
                        ocr_lin_ancho,
                        ocr_lin_largo};
                rowocr_lineaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowocr_lineaRow);
                return rowocr_lineaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocr_lineaRow FindByocr_lin_id(int ocr_lin_id) {
                return ((ocr_lineaRow)(this.Rows.Find(new object[] {
                            ocr_lin_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ocr_lineaDataTable cln = ((ocr_lineaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ocr_lineaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnocr_lin_id = base.Columns["ocr_lin_id"];
                this.columnocr_lin_nume_radi = base.Columns["ocr_lin_nume_radi"];
                this.columnocr_lin_batch_ocr = base.Columns["ocr_lin_batch_ocr"];
                this.columnocr_lin_pag_secpagina = base.Columns["ocr_lin_pag_secpagina"];
                this.columnocr_lin_texto = base.Columns["ocr_lin_texto"];
                this.columnocr_lin_confidence = base.Columns["ocr_lin_confidence"];
                this.columnocr_lin_blanks = base.Columns["ocr_lin_blanks"];
                this.columnocr_lin_lineaocr = base.Columns["ocr_lin_lineaocr"];
                this.columnocr_lin_linea = base.Columns["ocr_lin_linea"];
                this.columnocr_lin_fuente = base.Columns["ocr_lin_fuente"];
                this.columnocr_lin_pointsize = base.Columns["ocr_lin_pointsize"];
                this.columnocr_lin_tipodato = base.Columns["ocr_lin_tipodato"];
                this.columnocr_lin_secpalabra = base.Columns["ocr_lin_secpalabra"];
                this.columnocr_lin_x = base.Columns["ocr_lin_x"];
                this.columnocr_lin_y = base.Columns["ocr_lin_y"];
                this.columnocr_lin_ancho = base.Columns["ocr_lin_ancho"];
                this.columnocr_lin_largo = base.Columns["ocr_lin_largo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnocr_lin_id = new global::System.Data.DataColumn("ocr_lin_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_id);
                this.columnocr_lin_nume_radi = new global::System.Data.DataColumn("ocr_lin_nume_radi", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_nume_radi);
                this.columnocr_lin_batch_ocr = new global::System.Data.DataColumn("ocr_lin_batch_ocr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_batch_ocr);
                this.columnocr_lin_pag_secpagina = new global::System.Data.DataColumn("ocr_lin_pag_secpagina", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_pag_secpagina);
                this.columnocr_lin_texto = new global::System.Data.DataColumn("ocr_lin_texto", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_texto);
                this.columnocr_lin_confidence = new global::System.Data.DataColumn("ocr_lin_confidence", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_confidence);
                this.columnocr_lin_blanks = new global::System.Data.DataColumn("ocr_lin_blanks", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_blanks);
                this.columnocr_lin_lineaocr = new global::System.Data.DataColumn("ocr_lin_lineaocr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_lineaocr);
                this.columnocr_lin_linea = new global::System.Data.DataColumn("ocr_lin_linea", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_linea);
                this.columnocr_lin_fuente = new global::System.Data.DataColumn("ocr_lin_fuente", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_fuente);
                this.columnocr_lin_pointsize = new global::System.Data.DataColumn("ocr_lin_pointsize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_pointsize);
                this.columnocr_lin_tipodato = new global::System.Data.DataColumn("ocr_lin_tipodato", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_tipodato);
                this.columnocr_lin_secpalabra = new global::System.Data.DataColumn("ocr_lin_secpalabra", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_secpalabra);
                this.columnocr_lin_x = new global::System.Data.DataColumn("ocr_lin_x", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_x);
                this.columnocr_lin_y = new global::System.Data.DataColumn("ocr_lin_y", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_y);
                this.columnocr_lin_ancho = new global::System.Data.DataColumn("ocr_lin_ancho", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_ancho);
                this.columnocr_lin_largo = new global::System.Data.DataColumn("ocr_lin_largo", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnocr_lin_largo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnocr_lin_id}, true));
                this.columnocr_lin_id.AutoIncrement = true;
                this.columnocr_lin_id.AutoIncrementSeed = -1;
                this.columnocr_lin_id.AutoIncrementStep = -1;
                this.columnocr_lin_id.AllowDBNull = false;
                this.columnocr_lin_id.Unique = true;
                this.columnocr_lin_texto.MaxLength = 100;
                this.columnocr_lin_tipodato.MaxLength = 11;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocr_lineaRow Newocr_lineaRow() {
                return ((ocr_lineaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ocr_lineaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ocr_lineaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ocr_lineaRowChanged != null)) {
                    this.ocr_lineaRowChanged(this, new ocr_lineaRowChangeEvent(((ocr_lineaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ocr_lineaRowChanging != null)) {
                    this.ocr_lineaRowChanging(this, new ocr_lineaRowChangeEvent(((ocr_lineaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ocr_lineaRowDeleted != null)) {
                    this.ocr_lineaRowDeleted(this, new ocr_lineaRowChangeEvent(((ocr_lineaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ocr_lineaRowDeleting != null)) {
                    this.ocr_lineaRowDeleting(this, new ocr_lineaRowChangeEvent(((ocr_lineaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeocr_lineaRow(ocr_lineaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetOcr_Linea ds = new DataSetOcr_Linea();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ocr_lineaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ocr_lineaRow : global::System.Data.DataRow {
            
            private ocr_lineaDataTable tableocr_linea;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ocr_lineaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableocr_linea = ((ocr_lineaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ocr_lin_id {
                get {
                    return ((int)(this[this.tableocr_linea.ocr_lin_idColumn]));
                }
                set {
                    this[this.tableocr_linea.ocr_lin_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ocr_lin_nume_radi {
                get {
                    try {
                        return ((int)(this[this.tableocr_linea.ocr_lin_nume_radiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_nume_radi\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_nume_radiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ocr_lin_batch_ocr {
                get {
                    try {
                        return ((int)(this[this.tableocr_linea.ocr_lin_batch_ocrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_batch_ocr\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_batch_ocrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ocr_lin_pag_secpagina {
                get {
                    try {
                        return ((int)(this[this.tableocr_linea.ocr_lin_pag_secpaginaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_pag_secpagina\' de la tabla \'ocr_linea\' es DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_pag_secpaginaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ocr_lin_texto {
                get {
                    try {
                        return ((string)(this[this.tableocr_linea.ocr_lin_textoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_texto\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_textoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ocr_lin_confidence {
                get {
                    try {
                        return ((double)(this[this.tableocr_linea.ocr_lin_confidenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_confidence\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_confidenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ocr_lin_blanks {
                get {
                    try {
                        return ((int)(this[this.tableocr_linea.ocr_lin_blanksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_blanks\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_blanksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ocr_lin_lineaocr {
                get {
                    try {
                        return ((int)(this[this.tableocr_linea.ocr_lin_lineaocrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_lineaocr\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_lineaocrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ocr_lin_linea {
                get {
                    try {
                        return ((int)(this[this.tableocr_linea.ocr_lin_lineaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_linea\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_lineaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ocr_lin_fuente {
                get {
                    try {
                        return ((int)(this[this.tableocr_linea.ocr_lin_fuenteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_fuente\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_fuenteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ocr_lin_pointsize {
                get {
                    try {
                        return ((int)(this[this.tableocr_linea.ocr_lin_pointsizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_pointsize\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_pointsizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ocr_lin_tipodato {
                get {
                    try {
                        return ((string)(this[this.tableocr_linea.ocr_lin_tipodatoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_tipodato\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_tipodatoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ocr_lin_secpalabra {
                get {
                    try {
                        return ((int)(this[this.tableocr_linea.ocr_lin_secpalabraColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_secpalabra\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_secpalabraColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ocr_lin_x {
                get {
                    try {
                        return ((float)(this[this.tableocr_linea.ocr_lin_xColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_x\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_xColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ocr_lin_y {
                get {
                    try {
                        return ((float)(this[this.tableocr_linea.ocr_lin_yColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_y\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_yColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ocr_lin_ancho {
                get {
                    try {
                        return ((float)(this[this.tableocr_linea.ocr_lin_anchoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_ancho\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_anchoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ocr_lin_largo {
                get {
                    try {
                        return ((float)(this[this.tableocr_linea.ocr_lin_largoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ocr_lin_largo\' de la tabla \'ocr_linea\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableocr_linea.ocr_lin_largoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_nume_radiNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_nume_radiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_nume_radiNull() {
                this[this.tableocr_linea.ocr_lin_nume_radiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_batch_ocrNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_batch_ocrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_batch_ocrNull() {
                this[this.tableocr_linea.ocr_lin_batch_ocrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_pag_secpaginaNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_pag_secpaginaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_pag_secpaginaNull() {
                this[this.tableocr_linea.ocr_lin_pag_secpaginaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_textoNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_textoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_textoNull() {
                this[this.tableocr_linea.ocr_lin_textoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_confidenceNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_confidenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_confidenceNull() {
                this[this.tableocr_linea.ocr_lin_confidenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_blanksNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_blanksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_blanksNull() {
                this[this.tableocr_linea.ocr_lin_blanksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_lineaocrNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_lineaocrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_lineaocrNull() {
                this[this.tableocr_linea.ocr_lin_lineaocrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_lineaNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_lineaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_lineaNull() {
                this[this.tableocr_linea.ocr_lin_lineaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_fuenteNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_fuenteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_fuenteNull() {
                this[this.tableocr_linea.ocr_lin_fuenteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_pointsizeNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_pointsizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_pointsizeNull() {
                this[this.tableocr_linea.ocr_lin_pointsizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_tipodatoNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_tipodatoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_tipodatoNull() {
                this[this.tableocr_linea.ocr_lin_tipodatoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_secpalabraNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_secpalabraColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_secpalabraNull() {
                this[this.tableocr_linea.ocr_lin_secpalabraColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_xNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_xColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_xNull() {
                this[this.tableocr_linea.ocr_lin_xColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_yNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_yColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_yNull() {
                this[this.tableocr_linea.ocr_lin_yColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_anchoNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_anchoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_anchoNull() {
                this[this.tableocr_linea.ocr_lin_anchoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isocr_lin_largoNull() {
                return this.IsNull(this.tableocr_linea.ocr_lin_largoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setocr_lin_largoNull() {
                this[this.tableocr_linea.ocr_lin_largoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ocr_lineaRowChangeEvent : global::System.EventArgs {
            
            private ocr_lineaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocr_lineaRowChangeEvent(ocr_lineaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ocr_lineaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace OCR.Facultad.Ingenieria.ManagerBases.DataSetOcr_LineaTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ocr_lineaTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ocr_lineaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ocr_linea";
            tableMapping.ColumnMappings.Add("ocr_lin_id", "ocr_lin_id");
            tableMapping.ColumnMappings.Add("ocr_lin_nume_radi", "ocr_lin_nume_radi");
            tableMapping.ColumnMappings.Add("ocr_lin_batch_ocr", "ocr_lin_batch_ocr");
            tableMapping.ColumnMappings.Add("ocr_lin_pag_secpagina", "ocr_lin_pag_secpagina");
            tableMapping.ColumnMappings.Add("ocr_lin_texto", "ocr_lin_texto");
            tableMapping.ColumnMappings.Add("ocr_lin_confidence", "ocr_lin_confidence");
            tableMapping.ColumnMappings.Add("ocr_lin_blanks", "ocr_lin_blanks");
            tableMapping.ColumnMappings.Add("ocr_lin_lineaocr", "ocr_lin_lineaocr");
            tableMapping.ColumnMappings.Add("ocr_lin_linea", "ocr_lin_linea");
            tableMapping.ColumnMappings.Add("ocr_lin_fuente", "ocr_lin_fuente");
            tableMapping.ColumnMappings.Add("ocr_lin_pointsize", "ocr_lin_pointsize");
            tableMapping.ColumnMappings.Add("ocr_lin_tipodato", "ocr_lin_tipodato");
            tableMapping.ColumnMappings.Add("ocr_lin_secpalabra", "ocr_lin_secpalabra");
            tableMapping.ColumnMappings.Add("ocr_lin_x", "ocr_lin_x");
            tableMapping.ColumnMappings.Add("ocr_lin_y", "ocr_lin_y");
            tableMapping.ColumnMappings.Add("ocr_lin_ancho", "ocr_lin_ancho");
            tableMapping.ColumnMappings.Add("ocr_lin_largo", "ocr_lin_largo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `ocr_linea` WHERE ((`ocr_lin_id` = @Original_ocr_lin_id) AND ((@IsNul" +
                "l_ocr_lin_nume_radi = 1 AND `ocr_lin_nume_radi` IS NULL) OR (`ocr_lin_nume_radi`" +
                " = @Original_ocr_lin_nume_radi)) AND ((@IsNull_ocr_lin_batch_ocr = 1 AND `ocr_li" +
                "n_batch_ocr` IS NULL) OR (`ocr_lin_batch_ocr` = @Original_ocr_lin_batch_ocr)) AN" +
                "D ((@IsNull_ocr_lin_pag_secpagina = 1 AND `ocr_lin_pag_secpagina` IS NULL) OR (`" +
                "ocr_lin_pag_secpagina` = @Original_ocr_lin_pag_secpagina)) AND ((@IsNull_ocr_lin" +
                "_texto = 1 AND `ocr_lin_texto` IS NULL) OR (`ocr_lin_texto` = @Original_ocr_lin_" +
                "texto)) AND ((@IsNull_ocr_lin_confidence = 1 AND `ocr_lin_confidence` IS NULL) O" +
                "R (`ocr_lin_confidence` = @Original_ocr_lin_confidence)) AND ((@IsNull_ocr_lin_b" +
                "lanks = 1 AND `ocr_lin_blanks` IS NULL) OR (`ocr_lin_blanks` = @Original_ocr_lin" +
                "_blanks)) AND ((@IsNull_ocr_lin_lineaocr = 1 AND `ocr_lin_lineaocr` IS NULL) OR " +
                "(`ocr_lin_lineaocr` = @Original_ocr_lin_lineaocr)) AND ((@IsNull_ocr_lin_linea =" +
                " 1 AND `ocr_lin_linea` IS NULL) OR (`ocr_lin_linea` = @Original_ocr_lin_linea)) " +
                "AND ((@IsNull_ocr_lin_fuente = 1 AND `ocr_lin_fuente` IS NULL) OR (`ocr_lin_fuen" +
                "te` = @Original_ocr_lin_fuente)) AND ((@IsNull_ocr_lin_pointsize = 1 AND `ocr_li" +
                "n_pointsize` IS NULL) OR (`ocr_lin_pointsize` = @Original_ocr_lin_pointsize)) AN" +
                "D ((@IsNull_ocr_lin_tipodato = 1 AND `ocr_lin_tipodato` IS NULL) OR (`ocr_lin_ti" +
                "podato` = @Original_ocr_lin_tipodato)) AND ((@IsNull_ocr_lin_secpalabra = 1 AND " +
                "`ocr_lin_secpalabra` IS NULL) OR (`ocr_lin_secpalabra` = @Original_ocr_lin_secpa" +
                "labra)) AND ((@IsNull_ocr_lin_x = 1 AND `ocr_lin_x` IS NULL) OR (`ocr_lin_x` = @" +
                "Original_ocr_lin_x)) AND ((@IsNull_ocr_lin_y = 1 AND `ocr_lin_y` IS NULL) OR (`o" +
                "cr_lin_y` = @Original_ocr_lin_y)) AND ((@IsNull_ocr_lin_ancho = 1 AND `ocr_lin_a" +
                "ncho` IS NULL) OR (`ocr_lin_ancho` = @Original_ocr_lin_ancho)) AND ((@IsNull_ocr" +
                "_lin_largo = 1 AND `ocr_lin_largo` IS NULL) OR (`ocr_lin_largo` = @Original_ocr_" +
                "lin_largo)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_nume_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_nume_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_batch_ocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_batch_ocr";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_batch_ocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_batch_ocr";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_pag_secpagina";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pag_secpagina";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_pag_secpagina";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pag_secpagina";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_texto";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_texto";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_texto";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_texto";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_confidence";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_confidence";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_confidence";
            param.DbType = global::System.Data.DbType.Double;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_confidence";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_blanks";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_blanks";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_blanks";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_blanks";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_lineaocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_lineaocr";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_lineaocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_lineaocr";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_linea";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_linea";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_linea";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_linea";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_fuente";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_fuente";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_fuente";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_fuente";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_pointsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pointsize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_pointsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pointsize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_tipodato";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_tipodato";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_tipodato";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_tipodato";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_secpalabra";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_secpalabra";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_secpalabra";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_secpalabra";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_x";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_x";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_x";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_x";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_y";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_y";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_y";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_y";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_ancho";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_ancho";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_ancho";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_ancho";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_largo";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_largo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_largo";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_largo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `ocr_linea` (`ocr_lin_nume_radi`, `ocr_lin_batch_ocr`, `ocr_lin_pag_secpagina`, `ocr_lin_texto`, `ocr_lin_confidence`, `ocr_lin_blanks`, `ocr_lin_lineaocr`, `ocr_lin_linea`, `ocr_lin_fuente`, `ocr_lin_pointsize`, `ocr_lin_tipodato`, `ocr_lin_secpalabra`, `ocr_lin_x`, `ocr_lin_y`, `ocr_lin_ancho`, `ocr_lin_largo`) VALUES (@ocr_lin_nume_radi, @ocr_lin_batch_ocr, @ocr_lin_pag_secpagina, @ocr_lin_texto, @ocr_lin_confidence, @ocr_lin_blanks, @ocr_lin_lineaocr, @ocr_lin_linea, @ocr_lin_fuente, @ocr_lin_pointsize, @ocr_lin_tipodato, @ocr_lin_secpalabra, @ocr_lin_x, @ocr_lin_y, @ocr_lin_ancho, @ocr_lin_largo)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_nume_radi";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_batch_ocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_batch_ocr";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_pag_secpagina";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pag_secpagina";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_texto";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_texto";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_confidence";
            param.DbType = global::System.Data.DbType.Double;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_confidence";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_blanks";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_blanks";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_lineaocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_lineaocr";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_linea";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_linea";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_fuente";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_fuente";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_pointsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pointsize";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_tipodato";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_tipodato";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_secpalabra";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_secpalabra";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_x";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_x";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_y";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_y";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_ancho";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_ancho";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_largo";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_largo";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `ocr_linea` SET `ocr_lin_nume_radi` = @ocr_lin_nume_radi, `ocr_lin_batch_o" +
                "cr` = @ocr_lin_batch_ocr, `ocr_lin_pag_secpagina` = @ocr_lin_pag_secpagina, `ocr" +
                "_lin_texto` = @ocr_lin_texto, `ocr_lin_confidence` = @ocr_lin_confidence, `ocr_l" +
                "in_blanks` = @ocr_lin_blanks, `ocr_lin_lineaocr` = @ocr_lin_lineaocr, `ocr_lin_l" +
                "inea` = @ocr_lin_linea, `ocr_lin_fuente` = @ocr_lin_fuente, `ocr_lin_pointsize` " +
                "= @ocr_lin_pointsize, `ocr_lin_tipodato` = @ocr_lin_tipodato, `ocr_lin_secpalabr" +
                "a` = @ocr_lin_secpalabra, `ocr_lin_x` = @ocr_lin_x, `ocr_lin_y` = @ocr_lin_y, `o" +
                "cr_lin_ancho` = @ocr_lin_ancho, `ocr_lin_largo` = @ocr_lin_largo WHERE ((`ocr_li" +
                "n_id` = @Original_ocr_lin_id) AND ((@IsNull_ocr_lin_nume_radi = 1 AND `ocr_lin_n" +
                "ume_radi` IS NULL) OR (`ocr_lin_nume_radi` = @Original_ocr_lin_nume_radi)) AND (" +
                "(@IsNull_ocr_lin_batch_ocr = 1 AND `ocr_lin_batch_ocr` IS NULL) OR (`ocr_lin_bat" +
                "ch_ocr` = @Original_ocr_lin_batch_ocr)) AND ((@IsNull_ocr_lin_pag_secpagina = 1 " +
                "AND `ocr_lin_pag_secpagina` IS NULL) OR (`ocr_lin_pag_secpagina` = @Original_ocr" +
                "_lin_pag_secpagina)) AND ((@IsNull_ocr_lin_texto = 1 AND `ocr_lin_texto` IS NULL" +
                ") OR (`ocr_lin_texto` = @Original_ocr_lin_texto)) AND ((@IsNull_ocr_lin_confiden" +
                "ce = 1 AND `ocr_lin_confidence` IS NULL) OR (`ocr_lin_confidence` = @Original_oc" +
                "r_lin_confidence)) AND ((@IsNull_ocr_lin_blanks = 1 AND `ocr_lin_blanks` IS NULL" +
                ") OR (`ocr_lin_blanks` = @Original_ocr_lin_blanks)) AND ((@IsNull_ocr_lin_lineao" +
                "cr = 1 AND `ocr_lin_lineaocr` IS NULL) OR (`ocr_lin_lineaocr` = @Original_ocr_li" +
                "n_lineaocr)) AND ((@IsNull_ocr_lin_linea = 1 AND `ocr_lin_linea` IS NULL) OR (`o" +
                "cr_lin_linea` = @Original_ocr_lin_linea)) AND ((@IsNull_ocr_lin_fuente = 1 AND `" +
                "ocr_lin_fuente` IS NULL) OR (`ocr_lin_fuente` = @Original_ocr_lin_fuente)) AND (" +
                "(@IsNull_ocr_lin_pointsize = 1 AND `ocr_lin_pointsize` IS NULL) OR (`ocr_lin_poi" +
                "ntsize` = @Original_ocr_lin_pointsize)) AND ((@IsNull_ocr_lin_tipodato = 1 AND `" +
                "ocr_lin_tipodato` IS NULL) OR (`ocr_lin_tipodato` = @Original_ocr_lin_tipodato))" +
                " AND ((@IsNull_ocr_lin_secpalabra = 1 AND `ocr_lin_secpalabra` IS NULL) OR (`ocr" +
                "_lin_secpalabra` = @Original_ocr_lin_secpalabra)) AND ((@IsNull_ocr_lin_x = 1 AN" +
                "D `ocr_lin_x` IS NULL) OR (`ocr_lin_x` = @Original_ocr_lin_x)) AND ((@IsNull_ocr" +
                "_lin_y = 1 AND `ocr_lin_y` IS NULL) OR (`ocr_lin_y` = @Original_ocr_lin_y)) AND " +
                "((@IsNull_ocr_lin_ancho = 1 AND `ocr_lin_ancho` IS NULL) OR (`ocr_lin_ancho` = @" +
                "Original_ocr_lin_ancho)) AND ((@IsNull_ocr_lin_largo = 1 AND `ocr_lin_largo` IS " +
                "NULL) OR (`ocr_lin_largo` = @Original_ocr_lin_largo)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_nume_radi";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_batch_ocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_batch_ocr";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_pag_secpagina";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pag_secpagina";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_texto";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_texto";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_confidence";
            param.DbType = global::System.Data.DbType.Double;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_confidence";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_blanks";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_blanks";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_lineaocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_lineaocr";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_linea";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_linea";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_fuente";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_fuente";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_pointsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pointsize";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_tipodato";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_tipodato";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_secpalabra";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_secpalabra";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_x";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_x";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_y";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_y";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_ancho";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_ancho";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_largo";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_largo";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_nume_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_nume_radi";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_batch_ocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_batch_ocr";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_batch_ocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_batch_ocr";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_pag_secpagina";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pag_secpagina";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_pag_secpagina";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pag_secpagina";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_texto";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_texto";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_texto";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_texto";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_confidence";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_confidence";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_confidence";
            param.DbType = global::System.Data.DbType.Double;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_confidence";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_blanks";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_blanks";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_blanks";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_blanks";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_lineaocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_lineaocr";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_lineaocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_lineaocr";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_linea";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_linea";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_linea";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_linea";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_fuente";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_fuente";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_fuente";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_fuente";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_pointsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pointsize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_pointsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pointsize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_tipodato";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_tipodato";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_tipodato";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_tipodato";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_secpalabra";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_secpalabra";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_secpalabra";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_secpalabra";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_x";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_x";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_x";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_x";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_y";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_y";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_y";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_y";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_ancho";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_ancho";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_ancho";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_ancho";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@IsNull_ocr_lin_largo";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_largo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ocr_lin_largo";
            param.DbType = global::System.Data.DbType.Single;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_largo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::OCR.Facultad.Ingenieria.ManagerBases.Properties.Settings.Default.ocrConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[2];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT `ocr_lin_id`, `ocr_lin_nume_radi`, `ocr_lin_batch_ocr`, `ocr_lin_pag_secpagina`, `ocr_lin_texto`, `ocr_lin_confidence`, `ocr_lin_blanks`, `ocr_lin_lineaocr`, `ocr_lin_linea`, `ocr_lin_fuente`, `ocr_lin_pointsize`, `ocr_lin_tipodato`, `ocr_lin_secpalabra`, `ocr_lin_x`, `ocr_lin_y`, `ocr_lin_ancho`, `ocr_lin_largo` FROM `ocr_linea`";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"INSERT INTO `ocr_linea` (`ocr_lin_nume_radi`, `ocr_lin_batch_ocr`, `ocr_lin_pag_secpagina`, `ocr_lin_texto`, `ocr_lin_confidence`, `ocr_lin_blanks`, `ocr_lin_lineaocr`, `ocr_lin_linea`, `ocr_lin_fuente`, `ocr_lin_pointsize`, `ocr_lin_tipodato`, `ocr_lin_secpalabra`, `ocr_lin_x`, `ocr_lin_y`, `ocr_lin_ancho`, `ocr_lin_largo`) VALUES (@ocr_lin_nume_radi, @ocr_lin_batch_ocr, @ocr_lin_pag_secpagina, @ocr_lin_texto, @ocr_lin_confidence, @ocr_lin_blanks, @ocr_lin_lineaocr, @ocr_lin_linea, @ocr_lin_fuente, @ocr_lin_pointsize, @ocr_lin_tipodato, @ocr_lin_secpalabra, @ocr_lin_x, @ocr_lin_y, @ocr_lin_ancho, @ocr_lin_largo)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_nume_radi";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_nume_radi";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_batch_ocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_batch_ocr";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_pag_secpagina";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pag_secpagina";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_texto";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 100;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_texto";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_confidence";
            param.DbType = global::System.Data.DbType.Decimal;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_confidence";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_blanks";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_blanks";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_lineaocr";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_lineaocr";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_linea";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_linea";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_fuente";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_fuente";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_pointsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_pointsize";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_tipodato";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.VarChar;
            param.Size = 11;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_tipodato";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_secpalabra";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_secpalabra";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_x";
            param.DbType = global::System.Data.DbType.Decimal;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_x";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_y";
            param.DbType = global::System.Data.DbType.Decimal;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_y";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_ancho";
            param.DbType = global::System.Data.DbType.Decimal;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_ancho";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ocr_lin_largo";
            param.DbType = global::System.Data.DbType.Decimal;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Float;
            param.IsNullable = true;
            param.SourceColumn = "ocr_lin_largo";
            this._commandCollection[1].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetOcr_Linea.ocr_lineaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetOcr_Linea.ocr_lineaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetOcr_Linea.ocr_lineaDataTable dataTable = new DataSetOcr_Linea.ocr_lineaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetOcr_Linea.ocr_lineaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetOcr_Linea dataSet) {
            return this.Adapter.Update(dataSet, "ocr_linea");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_ocr_lin_id, 
                    global::System.Nullable<int> Original_ocr_lin_nume_radi, 
                    global::System.Nullable<int> Original_ocr_lin_batch_ocr, 
                    global::System.Nullable<int> Original_ocr_lin_pag_secpagina, 
                    string Original_ocr_lin_texto, 
                    global::System.Nullable<double> Original_ocr_lin_confidence, 
                    global::System.Nullable<int> Original_ocr_lin_blanks, 
                    global::System.Nullable<int> Original_ocr_lin_lineaocr, 
                    global::System.Nullable<int> Original_ocr_lin_linea, 
                    global::System.Nullable<int> Original_ocr_lin_fuente, 
                    global::System.Nullable<int> Original_ocr_lin_pointsize, 
                    string Original_ocr_lin_tipodato, 
                    global::System.Nullable<int> Original_ocr_lin_secpalabra, 
                    global::System.Nullable<float> Original_ocr_lin_x, 
                    global::System.Nullable<float> Original_ocr_lin_y, 
                    global::System.Nullable<float> Original_ocr_lin_ancho, 
                    global::System.Nullable<float> Original_ocr_lin_largo) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ocr_lin_id));
            if ((Original_ocr_lin_nume_radi.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ocr_lin_nume_radi.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_batch_ocr.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_ocr_lin_batch_ocr.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_pag_secpagina.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_ocr_lin_pag_secpagina.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_texto == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_ocr_lin_texto));
            }
            if ((Original_ocr_lin_confidence.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_ocr_lin_confidence.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_blanks.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_ocr_lin_blanks.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_lineaocr.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_ocr_lin_lineaocr.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_linea.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_ocr_lin_linea.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_fuente.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_ocr_lin_fuente.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_pointsize.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_ocr_lin_pointsize.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_tipodato == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_ocr_lin_tipodato));
            }
            if ((Original_ocr_lin_secpalabra.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_ocr_lin_secpalabra.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_x.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((float)(Original_ocr_lin_x.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_y.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((float)(Original_ocr_lin_y.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_ancho.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((float)(Original_ocr_lin_ancho.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_largo.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((float)(Original_ocr_lin_largo.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> ocr_lin_nume_radi, 
                    global::System.Nullable<int> ocr_lin_batch_ocr, 
                    global::System.Nullable<int> ocr_lin_pag_secpagina, 
                    string ocr_lin_texto, 
                    global::System.Nullable<double> ocr_lin_confidence, 
                    global::System.Nullable<int> ocr_lin_blanks, 
                    global::System.Nullable<int> ocr_lin_lineaocr, 
                    global::System.Nullable<int> ocr_lin_linea, 
                    global::System.Nullable<int> ocr_lin_fuente, 
                    global::System.Nullable<int> ocr_lin_pointsize, 
                    string ocr_lin_tipodato, 
                    global::System.Nullable<int> ocr_lin_secpalabra, 
                    global::System.Nullable<float> ocr_lin_x, 
                    global::System.Nullable<float> ocr_lin_y, 
                    global::System.Nullable<float> ocr_lin_ancho, 
                    global::System.Nullable<float> ocr_lin_largo) {
            if ((ocr_lin_nume_radi.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ocr_lin_nume_radi.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_batch_ocr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ocr_lin_batch_ocr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_pag_secpagina.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ocr_lin_pag_secpagina.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_texto == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ocr_lin_texto));
            }
            if ((ocr_lin_confidence.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(ocr_lin_confidence.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_blanks.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(ocr_lin_blanks.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_lineaocr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(ocr_lin_lineaocr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_linea.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(ocr_lin_linea.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_fuente.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(ocr_lin_fuente.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_pointsize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(ocr_lin_pointsize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_tipodato == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ocr_lin_tipodato));
            }
            if ((ocr_lin_secpalabra.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(ocr_lin_secpalabra.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_x.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((float)(ocr_lin_x.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_y.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((float)(ocr_lin_y.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_ancho.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((float)(ocr_lin_ancho.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_largo.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((float)(ocr_lin_largo.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> ocr_lin_nume_radi, 
                    global::System.Nullable<int> ocr_lin_batch_ocr, 
                    global::System.Nullable<int> ocr_lin_pag_secpagina, 
                    string ocr_lin_texto, 
                    global::System.Nullable<double> ocr_lin_confidence, 
                    global::System.Nullable<int> ocr_lin_blanks, 
                    global::System.Nullable<int> ocr_lin_lineaocr, 
                    global::System.Nullable<int> ocr_lin_linea, 
                    global::System.Nullable<int> ocr_lin_fuente, 
                    global::System.Nullable<int> ocr_lin_pointsize, 
                    string ocr_lin_tipodato, 
                    global::System.Nullable<int> ocr_lin_secpalabra, 
                    global::System.Nullable<float> ocr_lin_x, 
                    global::System.Nullable<float> ocr_lin_y, 
                    global::System.Nullable<float> ocr_lin_ancho, 
                    global::System.Nullable<float> ocr_lin_largo, 
                    int Original_ocr_lin_id, 
                    global::System.Nullable<int> Original_ocr_lin_nume_radi, 
                    global::System.Nullable<int> Original_ocr_lin_batch_ocr, 
                    global::System.Nullable<int> Original_ocr_lin_pag_secpagina, 
                    string Original_ocr_lin_texto, 
                    global::System.Nullable<double> Original_ocr_lin_confidence, 
                    global::System.Nullable<int> Original_ocr_lin_blanks, 
                    global::System.Nullable<int> Original_ocr_lin_lineaocr, 
                    global::System.Nullable<int> Original_ocr_lin_linea, 
                    global::System.Nullable<int> Original_ocr_lin_fuente, 
                    global::System.Nullable<int> Original_ocr_lin_pointsize, 
                    string Original_ocr_lin_tipodato, 
                    global::System.Nullable<int> Original_ocr_lin_secpalabra, 
                    global::System.Nullable<float> Original_ocr_lin_x, 
                    global::System.Nullable<float> Original_ocr_lin_y, 
                    global::System.Nullable<float> Original_ocr_lin_ancho, 
                    global::System.Nullable<float> Original_ocr_lin_largo) {
            if ((ocr_lin_nume_radi.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ocr_lin_nume_radi.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_batch_ocr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ocr_lin_batch_ocr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_pag_secpagina.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ocr_lin_pag_secpagina.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_texto == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ocr_lin_texto));
            }
            if ((ocr_lin_confidence.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(ocr_lin_confidence.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_blanks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ocr_lin_blanks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_lineaocr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ocr_lin_lineaocr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_linea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ocr_lin_linea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_fuente.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ocr_lin_fuente.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_pointsize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ocr_lin_pointsize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_tipodato == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ocr_lin_tipodato));
            }
            if ((ocr_lin_secpalabra.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(ocr_lin_secpalabra.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_x.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((float)(ocr_lin_x.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_y.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((float)(ocr_lin_y.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_ancho.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((float)(ocr_lin_ancho.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_largo.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((float)(ocr_lin_largo.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_ocr_lin_id));
            if ((Original_ocr_lin_nume_radi.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_ocr_lin_nume_radi.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_batch_ocr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_ocr_lin_batch_ocr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_pag_secpagina.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_ocr_lin_pag_secpagina.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_texto == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ocr_lin_texto));
            }
            if ((Original_ocr_lin_confidence.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((double)(Original_ocr_lin_confidence.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_blanks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_ocr_lin_blanks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_lineaocr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(Original_ocr_lin_lineaocr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_linea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_ocr_lin_linea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_fuente.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_ocr_lin_fuente.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_pointsize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_ocr_lin_pointsize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_tipodato == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_ocr_lin_tipodato));
            }
            if ((Original_ocr_lin_secpalabra.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(Original_ocr_lin_secpalabra.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_x.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((float)(Original_ocr_lin_x.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_y.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((float)(Original_ocr_lin_y.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_ancho.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((float)(Original_ocr_lin_ancho.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_ocr_lin_largo.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((float)(Original_ocr_lin_largo.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertOcr_Linea(
                    global::System.Nullable<int> ocr_lin_nume_radi, 
                    global::System.Nullable<int> ocr_lin_batch_ocr, 
                    global::System.Nullable<int> ocr_lin_pag_secpagina, 
                    string ocr_lin_texto, 
                    global::System.Nullable<decimal> ocr_lin_confidence, 
                    global::System.Nullable<int> ocr_lin_blanks, 
                    global::System.Nullable<int> ocr_lin_lineaocr, 
                    global::System.Nullable<int> ocr_lin_linea, 
                    global::System.Nullable<int> ocr_lin_fuente, 
                    global::System.Nullable<int> ocr_lin_pointsize, 
                    string ocr_lin_tipodato, 
                    global::System.Nullable<int> ocr_lin_secpalabra, 
                    global::System.Nullable<decimal> ocr_lin_x, 
                    global::System.Nullable<decimal> ocr_lin_y, 
                    global::System.Nullable<decimal> ocr_lin_ancho, 
                    global::System.Nullable<decimal> ocr_lin_largo) {
            global::MySql.Data.MySqlClient.MySqlCommand command = this.CommandCollection[1];
            if ((ocr_lin_nume_radi.HasValue == true)) {
                command.Parameters[0].Value = ((int)(ocr_lin_nume_radi.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_batch_ocr.HasValue == true)) {
                command.Parameters[1].Value = ((int)(ocr_lin_batch_ocr.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_pag_secpagina.HasValue == true)) {
                command.Parameters[2].Value = ((int)(ocr_lin_pag_secpagina.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_texto == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(ocr_lin_texto));
            }
            if ((ocr_lin_confidence.HasValue == true)) {
                command.Parameters[4].Value = ((decimal)(ocr_lin_confidence.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_blanks.HasValue == true)) {
                command.Parameters[5].Value = ((int)(ocr_lin_blanks.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_lineaocr.HasValue == true)) {
                command.Parameters[6].Value = ((int)(ocr_lin_lineaocr.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_linea.HasValue == true)) {
                command.Parameters[7].Value = ((int)(ocr_lin_linea.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_fuente.HasValue == true)) {
                command.Parameters[8].Value = ((int)(ocr_lin_fuente.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_pointsize.HasValue == true)) {
                command.Parameters[9].Value = ((int)(ocr_lin_pointsize.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_tipodato == null)) {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(ocr_lin_tipodato));
            }
            if ((ocr_lin_secpalabra.HasValue == true)) {
                command.Parameters[11].Value = ((int)(ocr_lin_secpalabra.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_x.HasValue == true)) {
                command.Parameters[12].Value = ((decimal)(ocr_lin_x.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_y.HasValue == true)) {
                command.Parameters[13].Value = ((decimal)(ocr_lin_y.Value));
            }
            else {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_ancho.HasValue == true)) {
                command.Parameters[14].Value = ((decimal)(ocr_lin_ancho.Value));
            }
            else {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((ocr_lin_largo.HasValue == true)) {
                command.Parameters[15].Value = ((decimal)(ocr_lin_largo.Value));
            }
            else {
                command.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private ocr_lineaTableAdapter _ocr_lineaTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ocr_lineaTableAdapter ocr_lineaTableAdapter {
            get {
                return this._ocr_lineaTableAdapter;
            }
            set {
                this._ocr_lineaTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._ocr_lineaTableAdapter != null) 
                            && (this._ocr_lineaTableAdapter.Connection != null))) {
                    return this._ocr_lineaTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._ocr_lineaTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(DataSetOcr_Linea dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._ocr_lineaTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ocr_linea.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ocr_lineaTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(DataSetOcr_Linea dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._ocr_lineaTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ocr_linea.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ocr_lineaTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(DataSetOcr_Linea dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._ocr_lineaTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ocr_linea.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ocr_lineaTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(DataSetOcr_Linea dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._ocr_lineaTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ocr_lineaTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" +
                        "sma cadena de conexión.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda" +
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co" +
                        "n las transacciones o el estado actual no permite que comience la transacción.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._ocr_lineaTableAdapter != null)) {
                    revertConnections.Add(this._ocr_lineaTableAdapter, this._ocr_lineaTableAdapter.Connection);
                    this._ocr_lineaTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(workConnection));
                    this._ocr_lineaTableAdapter.Transaction = ((global::MySql.Data.MySqlClient.MySqlTransaction)(workTransaction));
                    if (this._ocr_lineaTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ocr_lineaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ocr_lineaTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._ocr_lineaTableAdapter != null)) {
                    this._ocr_lineaTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(revertConnections[this._ocr_lineaTableAdapter]));
                    this._ocr_lineaTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591